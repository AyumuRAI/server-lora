// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  OTHERS
}

enum Role {
  ADMIN
  AGENT
  USER
}

enum LoanType {
  REGULAR
  BONUS
}

enum LoanStatusType {
  PROCESSING
  ACTIVE
  COMPLETED
}

enum InterestType {
  STRAIGHT
  DIMINISHING
}

enum LoanTransactionType {
  PAYMENT
}

enum LoanTransactionMethodType {
  GCASH
  LORA_WALLET
  BANK_TRANSFER
  DEBIT_CARD
  CREDIT_CARD
}

enum LoanTransactionStatusType {
  PENDING
  COMPLETED
  FAILED
}

enum WalletTransactionType {
  CASH_IN
}

enum WalletTransactionMethodType {
  GCASH
  PAYMAYA
  DEBIT_CARD
  CREDIT_CARD
  OVER_THE_COUNTER
}

enum AccountStatus {
  VERIFIED
  UNVERIFIED
}

model Account {
  id String @id @default(uuid())
  phone String? @unique
  fname String
  mname String?
  lname String
  suffix String?
  birthdate DateTime?
  gender Gender?
  nationality String?
  country String?
  province String?
  municipality String?
  barangay String?
  address_text String?
  pinCode String?
  email String? @unique
  password String?
  role Role @default(USER)
  status AccountStatus @default(UNVERIFIED)
  createdAt DateTime @default(now())

  loans Loans[]
  wallets Wallets[]
}

model Loans {
  id Int @id @default(autoincrement())
  accountId String
  type LoanType
  amount Decimal
  terms Int
  monthlyIncome Decimal
  purpose String
  isAtmCard Boolean @default(false)
  isCheck Boolean @default(false)
  isPassBook Boolean @default(false)
  other String @default("N/A")
  selectedLendingCompany String
  status LoanStatusType @default(PROCESSING)
  activedAt DateTime?
  createdAt DateTime @default(now())
  remainingBalance Decimal

  lendingCompany LendingCompanies @relation(fields: [selectedLendingCompany], references: [name], onDelete: Cascade)
  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  submittedRequirements SubmittedRequirements[]
  transactions LoanTransactions[]
}

model SubmittedRequirements {
  id String @id @default(uuid())
  loanId Int
  name String
  class String
  subclass String
  createdAt DateTime @default(now())

  loan Loans @relation(fields: [loanId], references: [id], onDelete: Cascade)
  files SubmittedRequirementFiles[]
}

model SubmittedRequirementFiles {
  id Int @id @default(autoincrement())
  reqId String
  url String
  type String
  createdAt DateTime @default(now())

  requirement SubmittedRequirements @relation(fields: [reqId], references: [id], onDelete: Cascade)
}

model LendingCompanies {
  id String @id @default(uuid())
  name String @unique
  interestRate Decimal
  interestType InterestType
  processingTime String
  processingFee Decimal
  isRequiredVisit Boolean
  reviews Int
  stars Decimal
  about String
  contact String
  address String
  logo String
  loanMinAmount Decimal
  loanMaxAmount Decimal
  loanMinTerm Int
  loanMaxTerm Int
  
  requirements LendingCompanyRequirements[]
  loans Loans[]
}

model LendingCompanyRequirements {
  id Int @id @default(autoincrement())
  lendingCompanyId String
  name String

  requirement LendingCompanies @relation(fields: [lendingCompanyId], references: [id], onDelete: Cascade)
}

model LoanTransactions {
  id Int @id @default(autoincrement())
  loanId Int
  type LoanTransactionType @default(PAYMENT)
  amount Decimal
  method LoanTransactionMethodType
  createdAt DateTime @default(now())
  approvedAt DateTime?
  status LoanTransactionStatusType
  failReason String?

  loan Loans @relation(fields: [loanId], references: [id], onDelete: Cascade)
}

model Wallets {
  id Int @id @default(autoincrement())
  accountId String @unique
  balance Decimal
  createdAt DateTime @default(now())

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  transactions WalletTransactions[]
}

model WalletTransactions {
  id Int @id @default(autoincrement())
  walletId Int
  type WalletTransactionType
  amount Decimal
  method WalletTransactionMethodType
  createdAt DateTime @default(now())

  wallet Wallets @relation(fields: [walletId], references: [id], onDelete: Cascade)
}